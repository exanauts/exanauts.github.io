var documenterSearchIndex = {"docs":
[{"location":"index.html#ProxAL","page":"Home","title":"ProxAL","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"This is a Julia implementation of a parallel <ins>Prox</ins>imal <ins>A</ins>ugmented <ins>L</ins>agrangian solver for solving multiperiod contingency-constrained ACOPF problems.","category":"page"},{"location":"index.html#Formulation","page":"Home","title":"Formulation","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The package is designed to solve ACOPF formulations over multiple time periods. The different time periods may have different active and reactive demands, and are linked together via active power ramping constraints: ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"-r_g leq p^0_gt-1 - p^0_gt leq r_g qquad forall g in G  forall t in T setminus 1","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Here, p^0_gt denotes the 'base-case' active power generation level of generator g in G in time period t in T, and r_g denotes its ramping capacity (per unit of time in which T is defined).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Here, p^0_gt denotes the 'base-case' active power generation level of generator g in G in time period t in T, and r_g denotes its ramping capacity (per unit of time in which T is defined).","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Each single-period ACOPF problem may itself be constrained further by a set of transmission line contingencies, denoted by K. The active and reactive power generations, and bus voltages must satisfy the following constraints in each time period and each contingency: (i) the power flow equations, (ii) bounds on active and reactive generation and voltage magnitudes, and (iii) line power flow limits. The package allows constraint infeasibility (except variable bounds) by penalizing them in the objective function.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The contingencies in each time period are linked together via their active power generations in one of several ways:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Preventive mode: active power generation in contingency k must be equal to the base case value.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"p_gt^k = p_gt^0 qquad forall g in G  forall k in K  forall t in T","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Corrective mode: active power generation is allowed to deviate from base case.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"01times r_g leq p_gt^k - p_gt^0 leq 01 times r_g qquad forall g in G  forall k in K  forall t in T","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Frequency control mode: omega_kt is the (deviation from nominal) system frequency in contingency k of time period t, and alpha_g is the droop control parameter of generator g. Note that omega_kt are additional decision variables in this case.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"p_gt^k = p_gt^0 + alpha_g omega_kt qquad forall g in G  forall k in K  forall t in T","category":"page"},{"location":"index.html#Algorithm","page":"Home","title":"Algorithm","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The model is decomposed into smaller optimization blocks. The pacakge supports decomposition into (A) single-period multiple-contingency ACOPF problems, and (B) single-period single-contingency ACOPF problems.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"This decomposition is achieved by formulating an Augmented Lagrangian with respect to the coupling constraints: in decomposition mode (A), these are the ramping constraints; and in mode (B), these are the ramping as well as contingency-linking constraints.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The decomposed formulation is solved using an iterative ADMM-like Jacobi scheme with a particular choice of proximal weights, by updating first the primal variables (e.g., power generations and voltages) and then the dual variables of the coupling constraints. The Jacobi nature of the update implies that the single-block optimization problems can be solved in parallel. The package allows for the parallel solution of these problems using Julia's Distributed computing package.","category":"page"},{"location":"index.html#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"The package can be used from the terminal or from within an existing Julia code or REPL.","category":"page"},{"location":"index.html#Julia-REPL","page":"Home","title":"Julia REPL","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Install ProxAL via the Julia package manager (type ]):","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"pkg> add git@github.com:exanauts/ProxAL.jl.git\r\npkg> test ProxAL","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Next, set up and solve the problem as follows. Note that all case files are stored in the data/ subdirectory. For a full list of model and algorithmic options, see src/proxALMutil.jl.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"using ProxAL\r\n\r\n# Model/formulation settings\r\nmodelinfo = ModelParams()\r\nmodelinfo.case_name = \"case9\"\r\nmodelinfo.num_time_periods = 2\r\nmodelinfo.num_ctgs = 1\r\nmodelinfo.weight_quadratic_penalty_time = 0.1\r\nmodelinfo.weight_freq_ctrl = 0.1\r\nmodelinfo.time_link_constr_type = :penalty\r\nmodelinfo.ctgs_link_constr_type = :frequency_ctrl\r\n\r\n# Load case\r\ncase_file = \"data/\" * modelinfo.case_name\r\nload_file = \"data/mp_demand/\" * modelinfo.case_name * \"_oneweek_168\"\r\nrawdata = RawData(case_file, load_file)\r\nopfdata = opf_loaddata(rawdata;\r\n                       time_horizon_start = 1,\r\n                       time_horizon_end = modelinfo.num_time_periods,\r\n                       load_scale = modelinfo.load_scale,\r\n                       ramp_scale = modelinfo.ramp_scale)\r\n\r\n# Algorithm settings\r\nalgparams = AlgParams()\r\nalgparams.parallel = false\r\nalgparams.decompCtgs = false\r\nalgparams.verbose = 0\r\nmaxρ = 0.1\r\nset_rho!(algparams;\r\n         ngen = length(opfdata.generators),\r\n         modelinfo = modelinfo,\r\n         maxρ_t = maxρ,\r\n         maxρ_c = maxρ)\r\nalgparams.mode = :coldstart\r\n\r\nif algparams.mode ∈ [:nondecomposed, :lyapunov_bound]\r\n    solve_fullmodel(opfdata, rawdata; modelinfo = modelinfo, algparams = algparams)\r\nelseif algparams.mode == :coldstart\r\n    run_proxALM(opfdata, rawdata; modelinfo = modelinfo, algparams = algparams)\r\nend","category":"page"},{"location":"index.html#Terminal","page":"Home","title":"Terminal","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Enter julia src/main.jl --help to get a help message:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"usage: main.jl [--T T] [--Ctgs CTGS] [--time_unit UNIT]\r\n               [--ramp_value RVAL] [--decompCtgs] [--ramp_constr RCON]\r\n               [--Ctgs_constr CCON] [--load_scale LSCALE]\r\n               [--quad_penalty QPEN] [--auglag_rho RHO]\r\n               [--compute_mode MODE] [-h] case\r\n\r\npositional arguments:\r\n  case                 Case name [case9, case30, case118,\r\n                       case1354pegase, case2383wp, case9241pegase]\r\n\r\noptional arguments:\r\n  --T T                No. of time periods (type: Int64, default: 10)\r\n  --Ctgs CTGS          No. of line ctgs (type: Int64, default: 0)\r\n  --time_unit UNIT     Select: [hour, minute] (default: \"minute\")\r\n  --ramp_value RVAL    Ramp value: % Pg_max/time_unit (type: Float64,\r\n                       default: 0.5)\r\n  --decompCtgs         Decompose contingencies\r\n  --ramp_constr RCON   Select: [penalty, equality, inequality]\r\n                       (default: \"penalty\")\r\n  --Ctgs_constr CCON   Select: [frequency_ctrl, preventive_penalty,\r\n                       preventive_equality, corrective_penalty,\r\n                       corrective_equality, corrective_inequality]\r\n                       (default: \"preventive_equality\")\r\n  --load_scale LSCALE  Load multiplier (type: Float64, default: 1.0)\r\n  --quad_penalty QPEN  Qaudratic penalty parameter (type: Float64,\r\n                       default: 1000.0)\r\n  --auglag_rho RHO     Aug Lag parameter (type: Float64, default: 1.0)\r\n  --compute_mode MODE  Choose from: [nondecomposed, coldstart,\r\n                       lyapunov_bound] (default: \"coldstart\")\r\n  -h, --help           show this help message and exit","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"note: Note\nThe --ramp_constr=equality and --ramp_constr=penalty options convert the inequality form of the ramping constraints (see above) into equality constraints by introducing additional slack variables 0 leq s_gt leq 2r_g.In the case of --ramp_constr=equality, the ramping constraints are then converted to: p^0_gt-1 - p^0_gt + s_gt = r_g.\nIn the case of --ramp_constr=penalty, further additional (unconstrained) variables z_gt are introduced, and the ramping constraints are converted to: p^0_gt-1 - p^0_gt + s_gt + z_gt = r_g. An additional term QPENcdotVert z rVert^2 is added to the objective function, where QPEN is set using the --quad_penalty=... option to the program.An analogous comment applies to the --Ctgs_constr={corrective_equality, corrective_penalty, preventive_penalty} options.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"A typical call might look as follows:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"julia src/main.jl case9 --T=2 --Ctgs=1 --time_unit=hour --ramp_value=0.5 --load_scale=1.0 --ramp_constr=penalty --Ctgs_constr=frequency_ctrl --auglag_rho=0.1 --quad_penalty=0.1 --compute_mode=coldstart","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"To use multiple processes (say 2 processes), modify the julia call to julia -p 2.","category":"page"}]
}
